{"version":3,"sources":["logo.svg","components/Episode.jsx","components/EpisodeList.jsx","components/SearchHistory.jsx","components/UserForm.jsx","components/LoadingStatus.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Episode","divStyles","width","float","marginRight","className","style","this","href","props","link","title","Component","EpisodeList","cardStyle","renderEpisodeList","id","styles","src","program_image","alt","program_title","dangerouslySetInnerHTML","__html","program_description","episodes","map","returnEpisodes","episode","i","key","index","enclosure","url","image","description","SearchHistory","React","useState","anchorEl","setAnchorEl","handleClose","renderItem","item","onClick","aria-controls","aria-haspopup","event","currentTarget","color","marginTop","keepMounted","open","Boolean","onClose","history","UserForm","state","enabled","feeds","handleSearchChange","bind","e","value","target","setState","onSubmit","getFeed","margin","display","type","name","onChange","variant","disabled","past","previous_feeds","LoadingStatus","fetching","statusContainer","height","justifyContent","alignItems","modalContainer","background","position","top","left","zIndex","modal","borderRadius","statusText","logo","App","renderHistoryList","renderHistory","feed","preventDefault","feed_url","elements","parser","require","customFields","keepArray","a","parseURL","items","error","console","log","renderAlert","aria-labelledby","aria-describedby","autoFocus","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2d6a36b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b068a0a.svg\";","import React, { Component } from \"react\";\n\nclass Episode extends Component {\n  divStyles = {\n    width: \"77vw\",\n    float: \"right\",\n    marginRight: \"1vw\"\n  };\n  render() {\n    return (\n      <div className=\"list-group\" style={this.divStyles}>\n        <a\n          href={this.props.link}\n          className=\"list-group-item list-group-item-action text-left\"\n        >\n          {this.props.title}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default Episode;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Episode from \"./Episode\";\n\n\n\nclass EpisodeList extends Component {\n  cardStyle = {\n    width: \"20vw\",\n    float: \"left\"\n  }\n  renderEpisodeList = () => {\n    return (\n      <div>\n        <div id=\"menu\" styles={{ float: \"left\" }}></div>\n        <div className=\"card\" style={this.cardStyle}>\n          <img src={this.props.program_image} className=\"card-img-top\" alt={this.props.program_title} />\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{this.props.program_title}</h5>\n            <div className=\"card-text\" dangerouslySetInnerHTML={{ __html: this.props.program_description }}></div>\n          </div>\n        </div>\n        {this.props.episodes.map(this.returnEpisodes)}\n      </div>\n    );\n  };\n\n  returnEpisodes = (episode, i) => {\n    return (\n      <Episode\n        key={i}\n        index={i}\n        title={episode.title}\n        enclosure={episode.enclosure}\n        link={\n          episode.enclosure\n            ? episode.enclosure.url\n            : \"json_data is null or undefined\"\n        }\n        image={this.props.program_image}\n        description={episode.description}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>{this.props.episodes ? this.renderEpisodeList() : <div />}</div>\n    );\n  }\n}\n\nexport default EpisodeList;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport \"../App.css\";\nexport default function SearchHistory(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const renderItem = (item, i) => {\n    return (\n      <MenuItem index={i} onClick={handleClose}>\n        {item}\n      </MenuItem>\n    );\n  };\n\n  const renderMenuItems = () => {\n    return <div>{props.history.map(renderItem)}</div>;\n  };\n\n  return (\n    <div>\n      <Button\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        style={{ color: \"grey\", marginTop: \"10px\" }}\n      >\n        Previous Feeds\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {props.history ? renderMenuItems() : <div />}\n      </Menu>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchHistory from \"./SearchHistory\";\n\nclass UserForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      enabled: true,\n      feeds: []\n    };\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  handleSearchChange(e) {\n    const value = e.target.value;\n    //console.log(this.state.feeds);\n    if (value !== \"\") {\n      this.setState({ enabled: false, feeds: [...this.state.feeds, value] });\n    } else {\n      this.setState({ enabled: true });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.props.getFeed}>\n          <Input\n            style={{ margin: \"20px auto\", display: \"block\" }}\n            type=\"text\"\n            name=\"feed_url\"\n            onChange={this.handleSearchChange}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={this.state.enabled}\n          >\n            Submit\n          </Button>\n          {this.props.past ? (\n              <SearchHistory history={this.props.previous_feeds} />\n          ) : (\n            <div></div>\n          )}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserForm;\n","import React from \"react\";\n\nimport logo from \"../logo.svg\";\n\nconst LoadingStatus = ({ fetching }) => {\n  const styles = {\n    statusContainer: {\n      height: \"15px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    modalContainer: {\n      width: \"100vw\",\n      height: \"100vh\",\n      background: \"rgba(0, 0, 0, 0.25)\",\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      zIndex: 1\n    },\n    modal: {\n      width: \"250px\",\n      height: \"200px\",\n      background: \"white\",\n      borderRadius: \"4px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    statusText: {\n      margin: 0\n    }\n  };\n\n  return (\n    <div style={styles.statusContainer}>\n      {fetching ? (\n        <div style={styles.modalContainer}>\n          <div style={styles.modal}>\n            <img src={logo} alt=\"loading animation\" />\n          </div>\n        </div>\n      ) : (<div></div>)}\n    </div>\n  );\n};\n\nexport default LoadingStatus;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport EpisodeList from \"./components/EpisodeList\";\nimport UserForm from \"./components/UserForm\";\nimport LoadingStatus from \"./components/LoadingStatus\";\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from \"@material-ui/core\";\nimport SearchHistory from \"./components/SearchHistory\";\n\nclass App extends Component {\n  state = {\n    episodes: null,\n    fetching: false,\n    program_title: null,\n    program_description: null,\n    program_image: null,\n    previous_feeds: [],\n    past: false\n  };\n\n  renderHistoryList = () => {\n    return <ul>{this.state.previous_feeds.map(this.renderHistory)}</ul>;\n  };\n\n  renderHistory = (feed, i) => {\n    return (\n      <li index={i} key={i}>\n        {feed}\n      </li>\n    );\n  };\n\n  getFeed = e => {\n    this.setState({ fetching: !this.state.fetching });\n    e.preventDefault();\n    const feed_url = e.target.elements.feed_url.value;\n    let Parser = require(\"rss-parser\");\n    let parser = new Parser({\n      customFields: {\n        item: [[\"enclosure\", { keepArray: true }]]\n      }\n    });\n    const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\n    if (feed_url) {\n      (async () => {\n        try {\n          let feed = await parser.parseURL(CORS_PROXY + feed_url);\n          this.setState({\n            episodes: feed.items,\n            program_title: feed.title,\n            fetching: !this.state.fetching,\n            program_image: feed.image.url,\n            program_description: feed.description,\n            previous_feeds: [...this.state.previous_feeds, feed_url],\n            past: true,\n            error: false\n          });\n        } catch (err) {\n          console.log(err);\n          this.setState({ error: true, fetching: false });\n        }\n      })();\n    } else {\n      return;\n    }\n  };\n\n  handleClose = () => {\n    this.setState({\n      error: false,\n      fetching: false\n    });\n  };\n\n  renderAlert = () => {\n    return (\n      <div>\n        <Dialog\n          open={this.state.error}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">Error Parsing Feed</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Please try retyping your RSS feed, or try a new one.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">quick-feed</h1>\n        </header>\n        <UserForm\n          getFeed={this.getFeed}\n          onClick={() => this.setState({ fetching: true })}\n          past={this.state.past}\n          previous_feeds={[...this.state.previous_feeds]}\n        />\n        {this.state.error ? this.renderAlert() : <div />}\n        {!this.state.past ? <p>Please enter an RSS feed</p> : <div></div>}\n        <LoadingStatus fetching={this.state.fetching} />\n\n        <EpisodeList\n          episodes={this.state.episodes}\n          program_title={this.state.program_title}\n          program_description={this.state.program_description}\n          program_image={this.state.program_image}\n          fetching={this.props.fetching}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}