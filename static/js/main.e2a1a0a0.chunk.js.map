{"version":3,"sources":["logo.svg","components/Episode.jsx","components/EpisodeList.jsx","components/UserForm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Episode","divStyles","width","float","class","style","this","href","props","link","className","title","Component","EpisodeList","cardStyle","renderEpisodeList","src","program_image","alt","program_title","dangerouslySetInnerHTML","__html","program_description","episodes","map","returnEpisodes","episode","i","key","index","enclosure","url","image","description","UserForm","state","enabled","handleSearchChange","bind","e","target","value","setState","onSubmit","getFeed","margin","display","type","name","onChange","variant","color","disabled","App","fetching","preventDefault","feed_url","elements","parser","require","customFields","item","keepArray","a","parseURL","feed","console","log","JSON","stringify","items","error","handleClose","renderAlert","open","aria-labelledby","aria-describedby","id","onClick","autoFocus","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2a1a0a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b068a0a.svg\";","import React, { Component } from \"react\";\n\nclass Episode extends Component {\n  divStyles = {\n    width: \"77vw\",\n    float: \"right\",\n    \"margin-right\": \"1vw\"\n  }\n  render() {\n    return (\n      <div class=\"list-group\" style={this.divStyles}>\n        <a href={this.props.link} className=\"list-group-item list-group-item-action text-left\">{this.props.title}</a>\n      </div>\n    );\n  }\n}\n\nexport default Episode;\n","import React, { Component } from \"react\";\nimport Episode from \"./Episode\";\n\nclass EpisodeList extends Component {\n  cardStyle = {\n    width: \"20vw\",\n    float: \"left\"\n  }\n  renderEpisodeList = () => {\n    return (\n      <div>\n        <div className=\"card\" style={this.cardStyle}>\n          <img src={this.props.program_image} className=\"card-img-top\" alt={this.props.program_title} />\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{this.props.program_title}</h5>\n            <div className=\"card-text\" dangerouslySetInnerHTML={{ __html: this.props.program_description }}></div>\n          </div>\n        </div>\n        {this.props.episodes.map(this.returnEpisodes)}\n      </div>\n    );\n  };\n\n  returnEpisodes = (episode, i) => {\n    return (\n      <Episode\n        key={i}\n        index={i}\n        title={episode.title}\n        enclosure={episode.enclosure}\n        link={\n          episode.enclosure\n            ? episode.enclosure.url\n            : \"json_data is null or undefined\"\n        }\n        image={this.props.program_image}\n        description={episode.description}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>{this.props.episodes ? this.renderEpisodeList() : <div />}</div>\n    );\n  }\n}\n\nexport default EpisodeList;\n","import React, { Component } from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\n\nclass UserForm extends Component {\n  constructor(props) {\n    super(props)\n    \n    this.state = {\n      enabled: true,\n    };\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  handleSearchChange(e) {\n    const value = e.target.value;\n\n    if (value !== '') { \n      this.setState({enabled : false});\n    } else {\n      this.setState({enabled : true});\n    }\n  };  \n\n  render() {\n    return (\n      <form onSubmit={this.props.getFeed}>\n        <Input\n          style={{ margin: \"20px auto\", display: \"block\" }}\n          type=\"text\"\n          name=\"feed_url\"\n          onChange={this.handleSearchChange}\n        />\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" disabled={this.state.enabled}>\n          Submit\n        </Button>\n      </form>\n    );  \n};\n};\n\nexport default UserForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport EpisodeList from \"./components/EpisodeList\";\nimport UserForm from \"./components/UserForm\";\nimport logo from \"./logo.svg\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from \"@material-ui/core\";\n\nclass App extends Component {\n  state = {\n    episodes: null,\n    fetching: false,\n    program_title: null,\n    program_description: null,\n    program_image: null\n  };\n\n  getFeed = e => {\n    this.setState({ fetching: !this.state.fetching });\n    e.preventDefault();\n    const feed_url = e.target.elements.feed_url.value;\n    let Parser = require(\"rss-parser\");\n    let parser = new Parser({\n      customFields: {\n        item: [[\"enclosure\", { keepArray: true }]]\n      }\n    });\n    const CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\n    if (feed_url) {\n      (async () => {\n        try {\n          let feed = await parser.parseURL(CORS_PROXY + feed_url);\n          console.log(\"feed: \" + JSON.stringify(feed, null, 4));\n          this.setState({\n            episodes: feed.items,\n            program_title: feed.title,\n            fetching: !this.state.fetching,\n            program_image: feed.image.url,\n            program_description: feed.description,\n            error: false\n          });\n        } catch (err) {\n          console.log(err);\n          this.setState({ error: true, fetching: false });\n        }\n      })();\n    } else {\n      return;\n    }\n  };\n\n  handleClose = () => {\n    this.setState({\n      error: false,\n      fetching: false\n    });\n  };\n\n  renderAlert = () => {\n    return (\n      <div>\n        <Dialog\n          open={this.state.error}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">Error Parsing Feed</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Please try retyping your RSS feed, or try a new one.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\" autoFocus>\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">quick-feed</h1>\n        </header>\n        <UserForm\n          getFeed={this.getFeed}\n          onClick={() => this.setState({ fetching: true })}\n        />\n        {this.state.error ? this.renderAlert() : <div />}\n        {!this.state.fetching ? (\n          <p>Please enter an RSS feed</p>\n        ) : (\n          <div>\n            <img src={logo} className=\"App-logo\" alt=\"App Logo\" />\n          </div>\n        )}\n        <EpisodeList\n          episodes={this.state.episodes}\n          program_title={this.state.program_title}\n          program_description={this.state.program_description}\n          program_image={this.state.program_image}\n          fetching={this.props.fetching}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}